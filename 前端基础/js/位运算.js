/* 异或运算符(^)
1. 0 ^ 任何数 = 任何数
2. 任何数 ^ 自身 = 0
3. 异或满足交换律、结合律
4.两个位置上相同的返回 0 不同的返回 1

a ^ 0 = a
a ^ a = 0
a ^ b ^ a = b ^ a ^ a = b ^ (a ^ a) = b ^ 0 = b

leetcode: 
  - 136
  - 17.04
*/

/*
按位与: 都是1才是1
按位或: 都是0才是0
按位异或: 不一样才是1
*/

/* 
n & (n−1) : 其运算结果恰为把 n 的二进制位中的最低位的 1 变为 0 之后的结果
*/

/* 取反~
- 将每位操作数取反，包括符号位
- 值: -(原数+1)
 */
;(function () {
  const a = 0b00000011 // 3
  console.log(~a) // -4 => 11111100(补码) => 10000100(原码)
})

/* 位移
<<: 左移n位，末尾补0
>>: 有符号右移，最高位符号位不变，其他正数补0，负数补1
>>>: 无符号右移
*/
;(function () {
  const a = 0b00000011 // 3
  console.log(~a) // -4 => 11111100(补码) => 10000100(原码)
})
